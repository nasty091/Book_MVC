 public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)

_DbContextOptions không phải là một dependency injection (DI) của DbContext. Nó là một đối tượng cung cấp thông tin cấu hình và tùy chọn cho DbContext. 
Thông qua DbContextOptions, bạn có thể cấu hình cách DbContext sẽ làm việc với cơ sở dữ liệu, chẳng hạn như loại cơ sở dữ liệu, chuỗi kết nối, và các tùy chọn khác. 
bạn có thể dễ dàng cấu hình và thay đổi tùy chọn của DbContext mà không cần thay đổi mã nguồn của lớp DbContext, giúp mã của bạn linh hoạt hơn và dễ dàng kiểm thử và quản lý.

_DbContext là một công cụ sử dụng để làm việc với cơ sở dữ liệu trong ứng dụng .NET.

_": base(options)" là cách để gọi constructor của lớp cơ sở, tức là constructor của lớp cha DbContext, 
và truyền tham số options vào constructor của lớp cha. Trong Entity Framework Core, 
constructor của DbContext cần nhận một tham số kiểu DbContextOptions<TContext> để cung cấp cấu hình cho DbContext. Thông qua dòng này, 
bạn đang chuyển tùy chọn cấu hình cơ sở dữ liệu cho DbContext từ constructor của ApplicationDbContext xuống constructor của DbContext.
------------------------------------------------------------------------------------------

_Migration là quá trình thay đổi cấu trúc của cơ sở dữ liệu, thường thông qua việc thêm, 
sửa đổi hoặc xóa các bảng, cột hoặc ràng buộc. Migrations giúp duy trì sự nhất quán giữa mã nguồn ứng dụng và cơ sở dữ liệu.

------------------------------------------------------------------------------------------

_Dependency Injection (DI) là 1 kỹ thuật lập trình giúp tách 1 class độc lập với các biến phụ thuộc
_DI cũng là 1 Design Pattern

    public class CategoryController : Controller
    {
	//Thay vì private readonly ApplicationDbContext _db = new ApplicationDbContext();
	//Sử dụng kỹ thuật dưới đây gọi là Constructor injection (1 dạng của DI)
        private readonly ApplicationDbContext _db; 
        public CategoryController(ApplicationDbContext db)
        {
            _db = db;
        }
    }

------------------------------------------------------------------------------------------

Generic type parameters là một tính năng trong ngôn ngữ lập trình cho phép bạn tạo ra các lớp, 
phương thức hoặc interface mà có thể làm việc với nhiều kiểu dữ liệu khác nhau mà không cần phải định nghĩa lại code. 

public class ExampleList<T>
{
    public void Add(T input) { }
}
class TestProgram
{
    private class ListItem { }
    static void Main()
    {
        ExampleList<int> list1 = new ExampleList<int>();
        list1.Add(1);

        ExampleList<string> list2 = new ExampleList<string>();
        list2.Add("Hello world");

        ExampleList<ListItem> list3 = new ExampleList<ListItem>();
        list3.Add(new ListItem());
    }
}
------------------------------------------------------------------------------------------
Trong lập trình, "projections" thường được sử dụng để chỉ quá trình chọn lọc hoặc ánh xạ (mapping) dữ liệu 
từ một dạng dữ liệu hoặc cấu trúc sang một dạng khác.

            IEnumerable<SelectListItem> CategoryList = _unitOfWork.Category
                .GetAll().Select(u => new SelectListItem
                {
                    Text = u.Name,
                    Value = u.Id.ToString(),
                });
------------------------------------------------------------------------------------------
<input value="@Model.OrderHeader.ShippingDate.ToShortDateString()" readonly type="text" class="form-control" />

_Trong đoạn mã này, bạn đang sử dụng thuộc tính value để thiết lập giá trị của trường dữ liệu. 
Giá trị này sẽ được render ngay khi trang được tạo và giữ nguyên giá trị đó khi truy cập trang. 
Nó không liên kết trực tiếp với dữ liệu của mô hình, điều này có nghĩa là nếu giá trị của OrderHeader.ShippingDate 
thay đổi sau khi trang được tạo, thì giá trị trong trường dữ liệu sẽ không được cập nhật tương ứng.

<input asp-for="@Model.OrderHeader.ShippingDate" readonly type="text" class="form-control" />

_Trong trường hợp này, bạn đang sử dụng asp-for để liên kết trực tiếp với mô hình. Nó sẽ tạo một liên kết giữa 
trường dữ liệu và thuộc tính trong mô hình. Nếu giá trị của OrderHeader.ShippingDate thay đổi sau khi trang được tạo 
và nếu mô hình được truyền lại vào server (khi gửi biểu mẫu), thì giá trị của trường dữ liệu sẽ được tự động cập nhật 
dựa trên giá trị mới của thuộc tính mô hình.
------------------------------------------------------------------------------------------
public IActionResult LockUnlock([FromBody]string id)

_Trong ASP.NET Core, [FromBody] là một attribute được sử dụng để chỉ định rằng giá trị của tham số trong 
một action method của controller sẽ được lấy từ phần body của HTTP request thay vì từ các phần khác như query string, 
route data, hay header.

Ví dụ, nếu bạn gửi một request như sau:

http
Copy code
POST /ControllerName/LockUnlock
Content-Type: application/json

"123"

Thì giá trị "123" sẽ được chuyển vào tham số id của action method thông qua việc sử dụng [FromBody].
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------